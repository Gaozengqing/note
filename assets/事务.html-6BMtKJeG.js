import{_ as a,o as s,c as n,d as e}from"./app-jFZM-UYu.js";const d={},i=e(`<h1 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h1><p>MySQL事务是一种保证一系列数据库操作（比如更新、删除等）在一个单一的工作单元中的完整性。如果这一系列操作中的任意一个步骤失败，整个操作都可以回滚，以保证数据库的一致性。</p><p>特性： ACID，原子性，一致性，隔离性，持久性</p><h3 id="a" tabindex="-1"><a class="header-anchor" href="#a" aria-hidden="true">#</a> A</h3><p>原子性指一个事务必须被视为一个不可分割的最小工作单元，只有事务中所有的数据库操作都执行成功，整个事务才算执行成功。事务中如果有任何一条SQL语句执行失败，已经执行成功的SQL语句也必须回滚。</p><h3 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C</h3><p>一致性指事务只能将数据库状态从一个一致性状态转变为另一个一致性状态。MySQL中的一致性主要由日志机制实现，通过日志记录数据库的所有变化，为事务恢复提供跟踪记录。</p><h3 id="i" tabindex="-1"><a class="header-anchor" href="#i" aria-hidden="true">#</a> I</h3><p>隔离性指一个事务在执行时不受其他事务的影响。隔离性保证了未完成事务的所有操作与数据库系统的隔离，直到事务完成为止，才能看到事务的执行结果。</p><h3 id="d" tabindex="-1"><a class="header-anchor" href="#d" aria-hidden="true">#</a> D</h3><p>持久性指事务一旦提交，其对数据库中数据的修改就是永久性的。事务的持久性不能做到百分之百的持久，只能从事务本身的角度来保证持久性，如果遇到一些外部原因（例如硬盘损坏）导致数据库发生故障，所有提交的数据可能都会丢失。</p><h2 id="事务的开启" tabindex="-1"><a class="header-anchor" href="#事务的开启" aria-hidden="true">#</a> 事务的开启</h2><p>默认情况下，用户执行的每一条SQL语句都会被当成单独的事务自动提交。如果想要将一组SQL语句作为一个事务，则需要显式地开启事务。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="事务的提交" tabindex="-1"><a class="header-anchor" href="#事务的提交" aria-hidden="true">#</a> 事务的提交</h2><p>显式开启事务后，每一条SQL语句不再自动提交，用户需要手动提交，只有提交后其中的操作才会生效。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="事务回滚" tabindex="-1"><a class="header-anchor" href="#事务回滚" aria-hidden="true">#</a> 事务回滚</h3><p>如果不想提交当前事务，可以将事务取消（即回滚）。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tip" tabindex="-1"><a class="header-anchor" href="#tip" aria-hidden="true">#</a> Tip</h3><hr><p>使用事务时的注意事项： <strong>ROLLBACK语句只能针对未提交的事务回滚</strong>，已提交的事务不能回滚。 <strong>当执行COMMIT语句或ROLLBACK语句后，当前事务就会自动结束</strong>。<strong>如果开启事务后直到MySQL会话结束时都没有提交事务，事务会自动回滚。</strong><strong>事务不允许嵌套</strong>，如果执行START TRANSACTION语句之前，上一个事务还没有提交，此时执行START TRANSACTION语句会隐式执行上一个事务的提交操作。 事务主要是针对数据表中数据，不包括创建或删除数据库、数据表，修改表结构等操作，而且执行这类操作时会隐式地提交事务。 <strong>InnoDB存储引擎支持事务</strong>，<strong>MyISAM存储引擎不支持事务</strong>。MyISAM存储引擎的数据表，无论事务是否提交，对数据的操作都会立即生效，不能回滚。 使用START TRANSACTION的别名BEGIN或BEGIN WORK显式地开启一个事务。由于BEGIN与存储过程中的BEGIN…END冲突，因此<strong>不推荐使用BEGIN。</strong></p><hr><h3 id="事物的自动提交" tabindex="-1"><a class="header-anchor" href="#事物的自动提交" aria-hidden="true">#</a> 事物的自动提交</h3><p>用户执行的每一条SQL语句都会被当成单独的事务自动提交。 如果关闭事务的自动提交，事务只能手动提交，通过更改AUTOCOMMIT的值设置事务的提交方式。 <strong>AUTOCOMMIT的值设置为1表示开启事务自动提交，设置为0表示关闭事务自动提交。</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>查看当前会话的AUTOCOMMIT值：

<span class="token keyword">SELECT</span> @<span class="token variable">@AUTOCOMMIT</span><span class="token punctuation">;</span>

关闭当前会话的事务自动提交：

<span class="token keyword">SET</span> AUTOCOMMIT<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">-- 关闭后需要手动提交事务，如果未提交事务直接终止MySQL会话，</span>
<span class="token comment">-- 事务自动回滚。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事务的保持点" tabindex="-1"><a class="header-anchor" href="#事务的保持点" aria-hidden="true">#</a> 事务的保持点</h3><p>回滚事务后，事务内的所有操作将都被撤销，如果只希望撤销事务内的一部分操作，可以在事务中设置一个保存点。 设置保存点后，可以将事务回滚到指定的保存点。如果不再需要保存点，可以将保存点删除。</p><p><strong>在事务中设置保存点的语句</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SAVEPOINT</span> 保存点名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>将事务回滚至保存点的语句</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> <span class="token keyword">SAVEPOINT</span> 保存点名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除保存点的语句</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">RELEASE</span> <span class="token keyword">SAVEPOINT</span> 保存点名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tip-1" tabindex="-1"><a class="header-anchor" href="#tip-1" aria-hidden="true">#</a> Tip</h3><hr><p>一个事务中可以创建多个保存点，在提交事务后，事务中的保存点就会被删除。 当回滚到某个保存点后，该保存点之后创建的保存点也会被删除。</p><hr>`,39),r=[i];function l(t,c){return s(),n("div",null,r)}const p=a(d,[["render",l],["__file","事务.html.vue"]]);export{p as default};
